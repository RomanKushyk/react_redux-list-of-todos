{"version":3,"sources":["types/TodoStatus.ts","store/index.ts","API/api.ts","components/TodoList/TodoList.tsx","components/LoadingError/LoadingError.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoStatus","SET_TODOS","SET_TODO_TITLE","SET_TODO_STATUS","SET_HAS_LOADING_ERROR","actions","todos","type","payload","title","status","hasError","getTodos","state","getTodoTitle","todoTitle","getTodoStatus","todoStatus","getHasLoadingError","hasLoadingError","initialState","all","store","createStore","action","composeWithDevTools","request","url","options","fetch","then","res","ok","Error","statusText","json","TodoList","memo","selectedUserId","setSelectedUserId","dispatch","useDispatch","useSelector","loadTodos","useEffect","data","handleChange","event","target","value","name","visibleTodos","useMemo","filter","todo","lowerTodoTitle","toLowerCase","lowerSearchWords","includes","active","completed","getStatus","length","className","id","onChange","Object","keys","map","option","checked","readOnly","userId","onClick","LoadingError","CurrentUser","useState","user","setUser","loadedUser","catch","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3dc08b36.chunk.js","sourcesContent":["export enum TodoStatus {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { TodoStatus } from '../types/TodoStatus';\nimport { Todo } from '../types/Todo';\n\n// Action types - is just a constant. MUST have a unique value.\nconst SET_TODOS = 'SET_TODOS';\nconst SET_TODO_TITLE = 'SET_TODO_TITLE';\nconst SET_TODO_STATUS = 'SET_TODO_STATUS';\nconst SET_HAS_LOADING_ERROR = 'SET_HAS_LOADING_ERROR';\n\n// Action creators - a function returning an action object\nexport const actions = {\n  setTodos: (todos: Todo[]) => ({\n    type: SET_TODOS,\n    payload: todos,\n  }),\n  setTodoTitle: (title: string) => ({\n    type: SET_TODO_TITLE,\n    payload: title,\n  }),\n  setTodoStatus: (status: TodoStatus) => ({\n    type: SET_TODO_STATUS,\n    payload: status,\n  }),\n  setHasLoadingError: (hasError: boolean) => ({\n    type: SET_HAS_LOADING_ERROR,\n    payload: hasError,\n  }),\n};\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getTodos = (state: RootState) => state.todos;\nexport const getTodoTitle = (state: RootState) => state.todoTitle;\nexport const getTodoStatus = (state: RootState) => state.todoStatus;\nexport const getHasLoadingError = (state: RootState) => state.hasLoadingError;\n\n// Initial state\nexport type RootState = {\n  todos: Todo[],\n  todoTitle: string,\n  todoStatus: TodoStatus,\n  hasLoadingError: boolean,\n};\n\nconst initialState: RootState = {\n  todos: [],\n  todoTitle: '',\n  todoStatus: TodoStatus.all,\n  hasLoadingError: false,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...state.todos, ...action.payload],\n      };\n\n    case SET_TODO_TITLE:\n      return {\n        ...state,\n        todoTitle: action.payload,\n      };\n\n    case SET_TODO_STATUS:\n      return {\n        ...state,\n        todoStatus: action.payload,\n      };\n\n    case SET_HAS_LOADING_ERROR:\n      return {\n        ...state,\n        hasLoadingError: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import { User } from '../types/User';\nimport { Todo } from '../types/Todo';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options?: RequestInit) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return request('/todos');\n};\n\nexport const getUserById = (id: number): Promise<User> => {\n  return request(`/users/${id}`);\n};\n","import React, {\n  Dispatch, memo, SetStateAction, useEffect, useMemo,\n} from 'react';\n\nimport './TodoList.scss';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  actions, getTodos as loadTodos, getTodoStatus, getTodoTitle,\n} from '../../store';\nimport { TodoStatus } from '../../types/TodoStatus';\nimport { Todo } from '../../types/Todo';\nimport { getTodos } from '../../API/api';\n\ninterface Props {\n  selectedUserId: number,\n  setSelectedUserId: Dispatch<SetStateAction<number>>,\n}\n\nexport const TodoList: React.FC<Props> = memo(({\n  selectedUserId,\n  setSelectedUserId,\n}) => {\n  const dispatch = useDispatch();\n  const todos = useSelector(loadTodos);\n  const todoStatus = useSelector(getTodoStatus);\n  const todoTitle = useSelector(getTodoTitle);\n\n  useEffect(() => {\n    getTodos()\n      .then(data => dispatch(actions.setTodos(data)));\n  }, []);\n\n  const handleChange = (event: React.ChangeEvent<\n  HTMLFormElement\n  | HTMLSelectElement\n  | HTMLInputElement\n  >) => {\n    const { value, name } = event.target;\n\n    switch (name) {\n      case 'todos-status-selector':\n        dispatch(actions.setTodoStatus(value));\n        break;\n\n      case 'todos-title-input':\n        dispatch(actions.setTodoTitle(value));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const prepareTodos = (todosToPrepare: Todo[]) => (\n    todosToPrepare.filter(todo => {\n      const lowerTodoTitle = todo.title.toLowerCase();\n      const lowerSearchWords = todoTitle.toLowerCase();\n\n      const getStatus = (status: TodoStatus) => {\n        switch (status) {\n          case TodoStatus.active:\n            return todo.completed === false;\n          case TodoStatus.completed:\n            return todo.completed === true;\n          default:\n            return true;\n        }\n      };\n\n      return lowerTodoTitle.includes(lowerSearchWords)\n        && getStatus(todoStatus);\n    })\n  );\n\n  const visibleTodos = useMemo(() => prepareTodos(todos),\n    [todoTitle, todoStatus, todos]);\n\n  return (\n    <>\n      {todos.length <= 0\n        ? 'Todos are loading'\n        : (\n          <div className=\"TodoList\">\n            <h2>Todos:</h2>\n\n            <div className=\"TodoList__list-container\">\n              <form className=\"TodoList__form form\">\n                <input\n                  type=\"text\"\n                  id=\"todos-title-input\"\n                  name=\"todos-title-input\"\n                  className=\"form__title-input\"\n                  value={todoTitle}\n                  onChange={handleChange}\n                />\n\n                <select\n                  id=\"todos-status-selector\"\n                  name=\"todos-status-selector\"\n                  className=\"form__status-selector\"\n                  value={todoStatus}\n                  onChange={handleChange}\n                >\n                  {Object.keys(TodoStatus).map(option => (\n                    <option value={option}>{option}</option>\n                  ))}\n                </select>\n              </form>\n\n              <ul className=\"TodoList__list\">\n                {visibleTodos.map(todo => (\n                  <li\n                    className={`TodoList__item TodoList__item--${\n                      todo.completed\n                        ? 'checked'\n                        : 'unchecked'\n                    }`}\n                    key={todo.id}\n                  >\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={todo.completed}\n                        readOnly\n                      />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      className={\n                        'TodoList__user-button button '\n                      + `TodoList__user-button--${\n                        todo.userId === selectedUserId && 'selected'\n                      }`\n                      }\n                      type=\"button\"\n                      onClick={() => setSelectedUserId(todo.userId)}\n                    >\n                      {`User #${todo.userId}`}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        )}\n    </>\n  );\n});\n","import React from 'react';\n\nimport './LoadingError.scss';\n\nexport const LoadingError: React.FC = () => (\n  <div className=\"LoadingError\">\n    An error occurred when loading user!\n  </div>\n);\n","import React, {\n  Dispatch, memo, SetStateAction,\n  useEffect, useState,\n} from 'react';\n\nimport './CurrentUser.scss';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserById } from '../../API/api';\nimport { LoadingError } from '../LoadingError';\nimport { actions, getHasLoadingError } from '../../store';\nimport { User } from '../../types/User';\n\ninterface Props {\n  selectedUserId: number,\n  setSelectedUserId: Dispatch<SetStateAction<number>>,\n}\n\nexport const CurrentUser: React.FC<Props> = memo(({\n  selectedUserId,\n  setSelectedUserId,\n}) => {\n  const dispatch = useDispatch();\n  const [user, setUser] = useState<User | null>(null);\n  const hasLoadingError = useSelector(getHasLoadingError);\n\n  useEffect(() => {\n    dispatch(actions.setHasLoadingError(false));\n    setUser(null);\n    getUserById(selectedUserId)\n      .then(loadedUser => setUser(loadedUser))\n      .catch(() => dispatch(actions.setHasLoadingError(true)));\n  }, [selectedUserId, setSelectedUserId]);\n\n  return (\n    <>\n      {/* eslint-disable-next-line no-nested-ternary */}\n      {!user ? (\n        hasLoadingError\n          ? <LoadingError />\n          : 'User is loading'\n      ) : (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${user?.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n          <button\n            className=\"\n          CurrentUser__clear\n          button\n        \"\n            type=\"button\"\n            onClick={() => setSelectedUserId(0)}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n    </>\n  );\n});\n","import { useState } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\nimport './styles/form.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nexport const App = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          selectedUserId={selectedUserId}\n          setSelectedUserId={setSelectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              setSelectedUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}